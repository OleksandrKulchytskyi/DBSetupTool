#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DBSetup.Common.DICOM.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Comm4")]
	public partial class PS360DICOMTablesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertMergeField(MergeField instance);
    partial void UpdateMergeField(MergeField instance);
    partial void DeleteMergeField(MergeField instance);
    partial void InsertDICOMMergeField(DICOMMergeField instance);
    partial void UpdateDICOMMergeField(DICOMMergeField instance);
    partial void DeleteDICOMMergeField(DICOMMergeField instance);
    partial void InsertDICOMSRTemplate(DICOMSRTemplate instance);
    partial void UpdateDICOMSRTemplate(DICOMSRTemplate instance);
    partial void DeleteDICOMSRTemplate(DICOMSRTemplate instance);
    partial void InsertDICOMSRTemplateType(DICOMSRTemplateType instance);
    partial void UpdateDICOMSRTemplateType(DICOMSRTemplateType instance);
    partial void DeleteDICOMSRTemplateType(DICOMSRTemplateType instance);
    partial void InsertDICOMDevice(DICOMDevice instance);
    partial void UpdateDICOMDevice(DICOMDevice instance);
    partial void DeleteDICOMDevice(DICOMDevice instance);
    #endregion
		
		public PS360DICOMTablesDataContext() : 
				base(global::DBSetup.Common.Properties.Settings.Default.Comm4ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public PS360DICOMTablesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PS360DICOMTablesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PS360DICOMTablesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PS360DICOMTablesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<MergeField> MergeFields
		{
			get
			{
				return this.GetTable<MergeField>();
			}
		}
		
		public System.Data.Linq.Table<DICOMMergeField> DICOMMergeFields
		{
			get
			{
				return this.GetTable<DICOMMergeField>();
			}
		}
		
		public System.Data.Linq.Table<DICOMSRTemplate> DICOMSRTemplates
		{
			get
			{
				return this.GetTable<DICOMSRTemplate>();
			}
		}
		
		public System.Data.Linq.Table<DICOMSRTemplateType> DICOMSRTemplateTypes
		{
			get
			{
				return this.GetTable<DICOMSRTemplateType>();
			}
		}
		
		public System.Data.Linq.Table<DICOMDevice> DICOMDevices
		{
			get
			{
				return this.GetTable<DICOMDevice>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MergeField")]
	public partial class MergeField : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MergeFieldID;
		
		private int _MergeFieldTypeID;
		
		private string _Name;
		
		private string _Description;
		
		private EntitySet<DICOMMergeField> _DICOMMergeFields;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMergeFieldIDChanging(int value);
    partial void OnMergeFieldIDChanged();
    partial void OnMergeFieldTypeIDChanging(int value);
    partial void OnMergeFieldTypeIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public MergeField()
		{
			this._DICOMMergeFields = new EntitySet<DICOMMergeField>(new Action<DICOMMergeField>(this.attach_DICOMMergeFields), new Action<DICOMMergeField>(this.detach_DICOMMergeFields));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MergeFieldID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MergeFieldID
		{
			get
			{
				return this._MergeFieldID;
			}
			set
			{
				if ((this._MergeFieldID != value))
				{
					this.OnMergeFieldIDChanging(value);
					this.SendPropertyChanging();
					this._MergeFieldID = value;
					this.SendPropertyChanged("MergeFieldID");
					this.OnMergeFieldIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MergeFieldTypeID", DbType="Int NOT NULL")]
		public int MergeFieldTypeID
		{
			get
			{
				return this._MergeFieldTypeID;
			}
			set
			{
				if ((this._MergeFieldTypeID != value))
				{
					this.OnMergeFieldTypeIDChanging(value);
					this.SendPropertyChanging();
					this._MergeFieldTypeID = value;
					this.SendPropertyChanged("MergeFieldTypeID");
					this.OnMergeFieldTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(2000)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MergeField_DICOMMergeField", Storage="_DICOMMergeFields", ThisKey="MergeFieldID", OtherKey="MergeFieldID")]
		public EntitySet<DICOMMergeField> DICOMMergeFields
		{
			get
			{
				return this._DICOMMergeFields;
			}
			set
			{
				this._DICOMMergeFields.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DICOMMergeFields(DICOMMergeField entity)
		{
			this.SendPropertyChanging();
			entity.MergeField = this;
		}
		
		private void detach_DICOMMergeFields(DICOMMergeField entity)
		{
			this.SendPropertyChanging();
			entity.MergeField = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DICOMMergeField")]
	public partial class DICOMMergeField : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DICOMMergeFieldID;
		
		private int _MergeFieldID;
		
		private int _DICOMSRTemplateID;
		
		private string _Name;
		
		private string _Description;
		
		private bool _IsActive;
		
		private string _ValueXPath;
		
		private string _UnitsXPath;
		
		private string _FindingSite;
		
		private string _Property;
		
		private string _Modifier;
		
		private bool _HasOBContext;
		
		private bool _HasLateralityContext;
		
		private EntityRef<MergeField> _MergeField;
		
		private EntityRef<DICOMSRTemplate> _DICOMSRTemplate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDICOMMergeFieldIDChanging(int value);
    partial void OnDICOMMergeFieldIDChanged();
    partial void OnMergeFieldIDChanging(int value);
    partial void OnMergeFieldIDChanged();
    partial void OnDICOMSRTemplateIDChanging(int value);
    partial void OnDICOMSRTemplateIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnValueXPathChanging(string value);
    partial void OnValueXPathChanged();
    partial void OnUnitsXPathChanging(string value);
    partial void OnUnitsXPathChanged();
    partial void OnFindingSiteChanging(string value);
    partial void OnFindingSiteChanged();
    partial void OnPropertyChanging(string value);
    partial void OnPropertyChanged();
    partial void OnModifierChanging(string value);
    partial void OnModifierChanged();
    partial void OnHasOBContextChanging(bool value);
    partial void OnHasOBContextChanged();
    partial void OnHasLateralityContextChanging(bool value);
    partial void OnHasLateralityContextChanged();
    #endregion
		
		public DICOMMergeField()
		{
			this._MergeField = default(EntityRef<MergeField>);
			this._DICOMSRTemplate = default(EntityRef<DICOMSRTemplate>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DICOMMergeFieldID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DICOMMergeFieldID
		{
			get
			{
				return this._DICOMMergeFieldID;
			}
			set
			{
				if ((this._DICOMMergeFieldID != value))
				{
					this.OnDICOMMergeFieldIDChanging(value);
					this.SendPropertyChanging();
					this._DICOMMergeFieldID = value;
					this.SendPropertyChanged("DICOMMergeFieldID");
					this.OnDICOMMergeFieldIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MergeFieldID", DbType="Int NOT NULL")]
		public int MergeFieldID
		{
			get
			{
				return this._MergeFieldID;
			}
			set
			{
				if ((this._MergeFieldID != value))
				{
					if (this._MergeField.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMergeFieldIDChanging(value);
					this.SendPropertyChanging();
					this._MergeFieldID = value;
					this.SendPropertyChanged("MergeFieldID");
					this.OnMergeFieldIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DICOMSRTemplateID", DbType="Int NOT NULL")]
		public int DICOMSRTemplateID
		{
			get
			{
				return this._DICOMSRTemplateID;
			}
			set
			{
				if ((this._DICOMSRTemplateID != value))
				{
					if (this._DICOMSRTemplate.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDICOMSRTemplateIDChanging(value);
					this.SendPropertyChanging();
					this._DICOMSRTemplateID = value;
					this.SendPropertyChanged("DICOMSRTemplateID");
					this.OnDICOMSRTemplateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(2000)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValueXPath", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ValueXPath
		{
			get
			{
				return this._ValueXPath;
			}
			set
			{
				if ((this._ValueXPath != value))
				{
					this.OnValueXPathChanging(value);
					this.SendPropertyChanging();
					this._ValueXPath = value;
					this.SendPropertyChanged("ValueXPath");
					this.OnValueXPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitsXPath", DbType="VarChar(MAX)")]
		public string UnitsXPath
		{
			get
			{
				return this._UnitsXPath;
			}
			set
			{
				if ((this._UnitsXPath != value))
				{
					this.OnUnitsXPathChanging(value);
					this.SendPropertyChanging();
					this._UnitsXPath = value;
					this.SendPropertyChanged("UnitsXPath");
					this.OnUnitsXPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FindingSite", DbType="VarChar(150)")]
		public string FindingSite
		{
			get
			{
				return this._FindingSite;
			}
			set
			{
				if ((this._FindingSite != value))
				{
					this.OnFindingSiteChanging(value);
					this.SendPropertyChanging();
					this._FindingSite = value;
					this.SendPropertyChanged("FindingSite");
					this.OnFindingSiteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Property", DbType="VarChar(1000)")]
		public string Property
		{
			get
			{
				return this._Property;
			}
			set
			{
				if ((this._Property != value))
				{
					this.OnPropertyChanging(value);
					this.SendPropertyChanging();
					this._Property = value;
					this.SendPropertyChanged("Property");
					this.OnPropertyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Modifier", DbType="VarChar(1000)")]
		public string Modifier
		{
			get
			{
				return this._Modifier;
			}
			set
			{
				if ((this._Modifier != value))
				{
					this.OnModifierChanging(value);
					this.SendPropertyChanging();
					this._Modifier = value;
					this.SendPropertyChanged("Modifier");
					this.OnModifierChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HasOBContext", DbType="Bit NOT NULL")]
		public bool HasOBContext
		{
			get
			{
				return this._HasOBContext;
			}
			set
			{
				if ((this._HasOBContext != value))
				{
					this.OnHasOBContextChanging(value);
					this.SendPropertyChanging();
					this._HasOBContext = value;
					this.SendPropertyChanged("HasOBContext");
					this.OnHasOBContextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HasLateralityContext", DbType="Bit NOT NULL")]
		public bool HasLateralityContext
		{
			get
			{
				return this._HasLateralityContext;
			}
			set
			{
				if ((this._HasLateralityContext != value))
				{
					this.OnHasLateralityContextChanging(value);
					this.SendPropertyChanging();
					this._HasLateralityContext = value;
					this.SendPropertyChanged("HasLateralityContext");
					this.OnHasLateralityContextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MergeField_DICOMMergeField", Storage="_MergeField", ThisKey="MergeFieldID", OtherKey="MergeFieldID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public MergeField MergeField
		{
			get
			{
				return this._MergeField.Entity;
			}
			set
			{
				MergeField previousValue = this._MergeField.Entity;
				if (((previousValue != value) 
							|| (this._MergeField.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MergeField.Entity = null;
						previousValue.DICOMMergeFields.Remove(this);
					}
					this._MergeField.Entity = value;
					if ((value != null))
					{
						value.DICOMMergeFields.Add(this);
						this._MergeFieldID = value.MergeFieldID;
					}
					else
					{
						this._MergeFieldID = default(int);
					}
					this.SendPropertyChanged("MergeField");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DICOMSRTemplate_DICOMMergeField", Storage="_DICOMSRTemplate", ThisKey="DICOMSRTemplateID", OtherKey="DICOMSRTemplateID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public DICOMSRTemplate DICOMSRTemplate
		{
			get
			{
				return this._DICOMSRTemplate.Entity;
			}
			set
			{
				DICOMSRTemplate previousValue = this._DICOMSRTemplate.Entity;
				if (((previousValue != value) 
							|| (this._DICOMSRTemplate.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DICOMSRTemplate.Entity = null;
						previousValue.DICOMMergeFields.Remove(this);
					}
					this._DICOMSRTemplate.Entity = value;
					if ((value != null))
					{
						value.DICOMMergeFields.Add(this);
						this._DICOMSRTemplateID = value.DICOMSRTemplateID;
					}
					else
					{
						this._DICOMSRTemplateID = default(int);
					}
					this.SendPropertyChanged("DICOMSRTemplate");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DICOMSRTemplate")]
	public partial class DICOMSRTemplate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DICOMSRTemplateID;
		
		private int _DICOMDeviceID;
		
		private int _DICOMSRTemplateTypeID;
		
		private string _Name;
		
		private string _Description;
		
		private System.DateTime _CreateDate;
		
		private System.Xml.Linq.XElement _SR;
		
		private EntitySet<DICOMMergeField> _DICOMMergeFields;
		
		private EntityRef<DICOMSRTemplateType> _DICOMSRTemplateType;
		
		private EntityRef<DICOMDevice> _DICOMDevice;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDICOMSRTemplateIDChanging(int value);
    partial void OnDICOMSRTemplateIDChanged();
    partial void OnDICOMDeviceIDChanging(int value);
    partial void OnDICOMDeviceIDChanged();
    partial void OnDICOMSRTemplateTypeIDChanging(int value);
    partial void OnDICOMSRTemplateTypeIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnSRChanging(System.Xml.Linq.XElement value);
    partial void OnSRChanged();
    #endregion
		
		public DICOMSRTemplate()
		{
			this._DICOMMergeFields = new EntitySet<DICOMMergeField>(new Action<DICOMMergeField>(this.attach_DICOMMergeFields), new Action<DICOMMergeField>(this.detach_DICOMMergeFields));
			this._DICOMSRTemplateType = default(EntityRef<DICOMSRTemplateType>);
			this._DICOMDevice = default(EntityRef<DICOMDevice>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DICOMSRTemplateID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DICOMSRTemplateID
		{
			get
			{
				return this._DICOMSRTemplateID;
			}
			set
			{
				if ((this._DICOMSRTemplateID != value))
				{
					this.OnDICOMSRTemplateIDChanging(value);
					this.SendPropertyChanging();
					this._DICOMSRTemplateID = value;
					this.SendPropertyChanged("DICOMSRTemplateID");
					this.OnDICOMSRTemplateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DICOMDeviceID", DbType="Int NOT NULL")]
		public int DICOMDeviceID
		{
			get
			{
				return this._DICOMDeviceID;
			}
			set
			{
				if ((this._DICOMDeviceID != value))
				{
					if (this._DICOMDevice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDICOMDeviceIDChanging(value);
					this.SendPropertyChanging();
					this._DICOMDeviceID = value;
					this.SendPropertyChanged("DICOMDeviceID");
					this.OnDICOMDeviceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DICOMSRTemplateTypeID", DbType="Int NOT NULL")]
		public int DICOMSRTemplateTypeID
		{
			get
			{
				return this._DICOMSRTemplateTypeID;
			}
			set
			{
				if ((this._DICOMSRTemplateTypeID != value))
				{
					if (this._DICOMSRTemplateType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDICOMSRTemplateTypeIDChanging(value);
					this.SendPropertyChanging();
					this._DICOMSRTemplateTypeID = value;
					this.SendPropertyChanged("DICOMSRTemplateTypeID");
					this.OnDICOMSRTemplateTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(100)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SR", DbType="Xml NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Xml.Linq.XElement SR
		{
			get
			{
				return this._SR;
			}
			set
			{
				if ((this._SR != value))
				{
					this.OnSRChanging(value);
					this.SendPropertyChanging();
					this._SR = value;
					this.SendPropertyChanged("SR");
					this.OnSRChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DICOMSRTemplate_DICOMMergeField", Storage="_DICOMMergeFields", ThisKey="DICOMSRTemplateID", OtherKey="DICOMSRTemplateID")]
		public EntitySet<DICOMMergeField> DICOMMergeFields
		{
			get
			{
				return this._DICOMMergeFields;
			}
			set
			{
				this._DICOMMergeFields.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DICOMSRTemplateType_DICOMSRTemplate", Storage="_DICOMSRTemplateType", ThisKey="DICOMSRTemplateTypeID", OtherKey="DICOMSRTemplateTypeID", IsForeignKey=true)]
		public DICOMSRTemplateType DICOMSRTemplateType
		{
			get
			{
				return this._DICOMSRTemplateType.Entity;
			}
			set
			{
				DICOMSRTemplateType previousValue = this._DICOMSRTemplateType.Entity;
				if (((previousValue != value) 
							|| (this._DICOMSRTemplateType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DICOMSRTemplateType.Entity = null;
						previousValue.DICOMSRTemplates.Remove(this);
					}
					this._DICOMSRTemplateType.Entity = value;
					if ((value != null))
					{
						value.DICOMSRTemplates.Add(this);
						this._DICOMSRTemplateTypeID = value.DICOMSRTemplateTypeID;
					}
					else
					{
						this._DICOMSRTemplateTypeID = default(int);
					}
					this.SendPropertyChanged("DICOMSRTemplateType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DICOMDevice_DICOMSRTemplate", Storage="_DICOMDevice", ThisKey="DICOMDeviceID", OtherKey="DICOMDeviceID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public DICOMDevice DICOMDevice
		{
			get
			{
				return this._DICOMDevice.Entity;
			}
			set
			{
				DICOMDevice previousValue = this._DICOMDevice.Entity;
				if (((previousValue != value) 
							|| (this._DICOMDevice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DICOMDevice.Entity = null;
						previousValue.DICOMSRTemplates.Remove(this);
					}
					this._DICOMDevice.Entity = value;
					if ((value != null))
					{
						value.DICOMSRTemplates.Add(this);
						this._DICOMDeviceID = value.DICOMDeviceID;
					}
					else
					{
						this._DICOMDeviceID = default(int);
					}
					this.SendPropertyChanged("DICOMDevice");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DICOMMergeFields(DICOMMergeField entity)
		{
			this.SendPropertyChanging();
			entity.DICOMSRTemplate = this;
		}
		
		private void detach_DICOMMergeFields(DICOMMergeField entity)
		{
			this.SendPropertyChanging();
			entity.DICOMSRTemplate = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DICOMSRTemplateType")]
	public partial class DICOMSRTemplateType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DICOMSRTemplateTypeID;
		
		private string _Name;
		
		private string _Description;
		
		private string _Code;
		
		private EntitySet<DICOMSRTemplate> _DICOMSRTemplates;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDICOMSRTemplateTypeIDChanging(int value);
    partial void OnDICOMSRTemplateTypeIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    #endregion
		
		public DICOMSRTemplateType()
		{
			this._DICOMSRTemplates = new EntitySet<DICOMSRTemplate>(new Action<DICOMSRTemplate>(this.attach_DICOMSRTemplates), new Action<DICOMSRTemplate>(this.detach_DICOMSRTemplates));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DICOMSRTemplateTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DICOMSRTemplateTypeID
		{
			get
			{
				return this._DICOMSRTemplateTypeID;
			}
			set
			{
				if ((this._DICOMSRTemplateTypeID != value))
				{
					this.OnDICOMSRTemplateTypeIDChanging(value);
					this.SendPropertyChanging();
					this._DICOMSRTemplateTypeID = value;
					this.SendPropertyChanged("DICOMSRTemplateTypeID");
					this.OnDICOMSRTemplateTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(100)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DICOMSRTemplateType_DICOMSRTemplate", Storage="_DICOMSRTemplates", ThisKey="DICOMSRTemplateTypeID", OtherKey="DICOMSRTemplateTypeID")]
		public EntitySet<DICOMSRTemplate> DICOMSRTemplates
		{
			get
			{
				return this._DICOMSRTemplates;
			}
			set
			{
				this._DICOMSRTemplates.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DICOMSRTemplates(DICOMSRTemplate entity)
		{
			this.SendPropertyChanging();
			entity.DICOMSRTemplateType = this;
		}
		
		private void detach_DICOMSRTemplates(DICOMSRTemplate entity)
		{
			this.SendPropertyChanging();
			entity.DICOMSRTemplateType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DICOMDevice")]
	public partial class DICOMDevice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DICOMDeviceID;
		
		private string _Manufacturer;
		
		private string _Model;
		
		private string _Version;
		
		private EntitySet<DICOMSRTemplate> _DICOMSRTemplates;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDICOMDeviceIDChanging(int value);
    partial void OnDICOMDeviceIDChanged();
    partial void OnManufacturerChanging(string value);
    partial void OnManufacturerChanged();
    partial void OnModelChanging(string value);
    partial void OnModelChanged();
    partial void OnVersionChanging(string value);
    partial void OnVersionChanged();
    #endregion
		
		public DICOMDevice()
		{
			this._DICOMSRTemplates = new EntitySet<DICOMSRTemplate>(new Action<DICOMSRTemplate>(this.attach_DICOMSRTemplates), new Action<DICOMSRTemplate>(this.detach_DICOMSRTemplates));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DICOMDeviceID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DICOMDeviceID
		{
			get
			{
				return this._DICOMDeviceID;
			}
			set
			{
				if ((this._DICOMDeviceID != value))
				{
					this.OnDICOMDeviceIDChanging(value);
					this.SendPropertyChanging();
					this._DICOMDeviceID = value;
					this.SendPropertyChanged("DICOMDeviceID");
					this.OnDICOMDeviceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Manufacturer", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Manufacturer
		{
			get
			{
				return this._Manufacturer;
			}
			set
			{
				if ((this._Manufacturer != value))
				{
					this.OnManufacturerChanging(value);
					this.SendPropertyChanging();
					this._Manufacturer = value;
					this.SendPropertyChanged("Manufacturer");
					this.OnManufacturerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Model", DbType="VarChar(100)")]
		public string Model
		{
			get
			{
				return this._Model;
			}
			set
			{
				if ((this._Model != value))
				{
					this.OnModelChanging(value);
					this.SendPropertyChanging();
					this._Model = value;
					this.SendPropertyChanged("Model");
					this.OnModelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="VarChar(100)")]
		public string Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DICOMDevice_DICOMSRTemplate", Storage="_DICOMSRTemplates", ThisKey="DICOMDeviceID", OtherKey="DICOMDeviceID")]
		public EntitySet<DICOMSRTemplate> DICOMSRTemplates
		{
			get
			{
				return this._DICOMSRTemplates;
			}
			set
			{
				this._DICOMSRTemplates.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DICOMSRTemplates(DICOMSRTemplate entity)
		{
			this.SendPropertyChanging();
			entity.DICOMDevice = this;
		}
		
		private void detach_DICOMSRTemplates(DICOMSRTemplate entity)
		{
			this.SendPropertyChanging();
			entity.DICOMDevice = null;
		}
	}
}
#pragma warning restore 1591
